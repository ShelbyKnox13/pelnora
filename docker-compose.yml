version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pelnora-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: pelnora_db
      POSTGRES_USER: pelnora_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - pelnora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pelnora_user -d pelnora_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pelnora Application
  pelnora-app:
    build: .
    container_name: pelnora-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pelnora_user:${DB_PASSWORD:-secure_password_here}@postgres:5432/pelnora_db
      PORT: 3000
      SESSION_SECRET: ${SESSION_SECRET:-your-super-secret-session-key}
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - pelnora-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pelnora-nginx
    restart: unless-stopped
    depends_on:
      - pelnora-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - pelnora-network

volumes:
  postgres_data:
    driver: local

networks:
  pelnora-network:
    driver: bridge